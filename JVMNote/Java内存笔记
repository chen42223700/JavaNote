JAVA运行是数据区域
如图，数据区域.vsd

1.程序计数器（Program Counter Register）
	她占有哟快较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。
字节码解释器工作是就是通过改变这个计数器的值来选取下一台需要执行的字节码指令，
分支、循环。跳转、异常处理、线程恢复等基础功能都需要以来这个计数器
	如果线程正在执行的是一个java方法，计数机记录的是执行的虚拟机字节码指令的地址
如果正在执行的是Native方法，这个计数器值则为空（Undefined）。此内存区域
是唯一一个在Java虚拟机规范中没有规定OutOfMemoryError情况的区域。

2.Java虚拟机栈(Java Virtual Machine Stacks)
	虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会
创建一个栈帧(Stack Frame)用于存储 局部变量表、操作数栈、董动态链接、
方法出口等信息。每一个方法从高调用直至执行完成的过程，就对应着一个栈帧在
虚拟机栈入栈到出栈的过程。
	局部变量表存放了编译期可知的各种基本数据类型(boolean、byte、char、
short、int、float、long、double)、对象引用(reference类型)和
returnAddress类型(指向了一条字节码指令的地址)。
	在Java虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度
大于虚拟机允许的升读,将抛出StackOverflowError 异常：如果虚拟机栈可以
动态扩展，如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常

3.本地方法栈（Native Method Stack）
	与虚拟机栈所发挥的作用是非常相似的，他们之间的区别不过是虚拟机栈执行Java
方法，而本地方法栈则为虚拟机使用到的Native方法服务。
Native Method：java调用非java代码的接口。在nativeMethod.java
中有几个例子可以参考

4.Java堆
	通常是Java虚拟机所管理的内存中最大的一块。Java对是被所有线程共享的
	
	
